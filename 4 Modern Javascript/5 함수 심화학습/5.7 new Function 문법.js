// new Function 문법 또한 전역 객체처럼 자주 사용하지는 않지만 대안이 없을 시 사용함

문법;
let func = new Function ([arg1, arg2, ...argN], functionBody);
new Function('a', 'b', 'return a + b'); // 기본 문법
new Function('a,b', 'return a + b'); // 쉼표로 구분
new Function('a , b', 'return a + b'); // 쉼표와 공백으로 구분

// *** 기존에 사용하던 방법과 new Function을 사용해 함수를 만드는 방법의 가장 큰 차이는 런타임에 받은 문자열을 사용해 함수를 만들 수 있다는 점
// 함수 표현식과 함수 선언문은 개발자가 직접 스크립트를 작성해야만 함수를 만들 수 있음
// 그러나 new Function이라는 문법을 사용하면 어떤 문자열도 함수로 바꿀 수 있음. 서버에서 전달받은 문자열을 이용해 새로운 함수를 만들고 이를 실행하는 것도 가능

let str = 문자열; // 서버에서 동적으로 전달받은 문자열(코드 형태) 

let func = new Function(str);
func();

// 서버에서 코드를 받거나 템플릿을 사용해 함수를 동적으로 컴파일해야 하는 경우, 복잡한 웹 애플리케이션을 구현할 때와 같이 아주 특별한 경우에 new Function을 사용할 수 있음

/*
new Function을 이용해 만든 함수의 [[Environment]]는 외부 렉시컬 환경이 아닌 전역 렉시컬 환경을 참조하므로 외부 변수를 사용할 수 없음
단점 같아 보이는 특징이긴 하지만 에러를 예방해 준다는 관점에선 장점이 되기도 함 
구조상으론 매개변수를 사용해 값을 받는 게 더 나음 --> 압축기에 의한 에러도 방지할 수 있음
*/