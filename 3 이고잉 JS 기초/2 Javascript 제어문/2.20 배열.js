/*배열
= (여러 값이 연속으로 저장된 공간/ 형태가 비슷한 여러 객체를 다룰 때 유용)
(배열은 index를 사용해서 각 element에 접근할 수 있음)
(객체는 속성이름과 그에 대응하는 값의 집합이고 배열은 값의 나열) --> (객체 = '속성:값', 배열 = 'index:element')
(배열은 비슷한 값을 여러개 관리해야 할 때 유용하고, 객체는 속성이 여러 개인 복잡한 데이터 타입이 필요할 때 유용함)*/

// 배열을 가장 쉽게 정의하는 방법 : 대괄호 사용 
eg: var arr =[]; //변수 arr을 선언하되 대괄호를 적어 배열임을 알림

// (배열또한 객체처럼 여러 값을 쉼표로 구분가능)
eg: var fruits = ["apple","banana","mango"];

//배열의 값에 접근하기
document.write(fruits[0]);
"apple"

// 배열의 길이
document.write(fruits.length);
3

/*(객체에서 어떤 데이터 타입이든 속성에 저장할 수 있었듯이 배열에서도 어떤 엘리먼트든 배열안에 넣을 수 있음
(심지어 배열 혹은 객체또한 넣을 수 있음))*/
eg: 
var mixed_arr = [1, true, 3.14, "string", {name : "object"}, [1,2,3]];
undefined
mixed_arr; 
(6) [1, true, 3.14, "string", {gosmain}, Array(3)]


//배열 속 엘리먼트를 추가/삭제하는 명령 : pop(), push(), shift(), unshift(). <pop,shift=삭제, push,unshift=추가>

var arr = [1, 2, 3, 4, 5];
undefined

arr.pop();       //맨 뒤의 엘리먼트 삭제
5                //5를 삭제
arr;
[1,2,3,4]        //맨 뒤 엘리먼트 5 삭제

arr.shift();     //맨 앞의 엘리먼트 삭제
1                //1을 삭제
arr;
[2,3,4]          //맨 앞의 엘리먼트 1 삭제

arr.push(6);     //맨 뒤에 엘리먼트 6 추가
4                //길이가 4인 배열이 된다는 뜻
arr;
[2,3,4,6]        //6이 맨뒤에 추가됨

arr.unshift(0);  //맨 앞에 엘리먼트 0 추가
5
arr;
[0,2,3,4,6]      //0이 맨앞으로 추가됨


/* reverse() 명령은 배열의 순서를 반대로 뒤집음 (다시 원상복귀시키는 명령: sort())
 배열에서도 concat() 명령으로 두 배열 합치기 가능 */
arr.reverse();
[6,4,3,2,0]
arr.sort();
[0,2,3,4,6]

//concat()명령과 push()명령의 차이
arr1.concat(arr2);
[1,2,3,4,5,6]
arr1.push(arr2);
[1,2,3,[4,5,6]]

//split() 명령은 문자열을 구분자(seperator)로 나누고 나눠진 각 문자열을 배열에 넣어 반환 */

eg:
var str = "1, 2, 3, 4, 5";
undefined

str.split(",");           //쉼표로 구분(구분자가 쉼표)
["1", "2", "3", "4", "5"] //변수 속 값이 배열안에 들어감

// 쉼표로 구분되어 있지 않아도 가능:
"1-2-3-4-5".split("-");   //쉼표없이 구분 (변수 선언 예시가 아닌 문자열 예시)
["1", "2", "3", "4", "5"]